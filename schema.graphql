"""All input for the create `_PrismaMigration` mutation."""
input CreatePrismaMigrationInput {
  """The `_PrismaMigration` to be created by this mutation."""
  _prismaMigration: _PrismaMigrationInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `_PrismaMigration` mutation."""
type CreatePrismaMigrationPayload {
  """The `_PrismaMigration` that was created by this mutation."""
  _prismaMigration: _PrismaMigration

  """An edge for our `_PrismaMigration`. May be used by Relay 1."""
  _prismaMigrationEdge(
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Store` mutation."""
input CreateStoreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Store` to be created by this mutation."""
  store: StoreInput!
}

"""The output of our create `Store` mutation."""
type CreateStorePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Store` that was created by this mutation."""
  store: Store

  """An edge for our `Store`. May be used by Relay 1."""
  storeEdge(
    """The method to use when ordering `Store`."""
    orderBy: [StoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): StoresEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deletePrismaMigrationById` mutation."""
input DeletePrismaMigrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `deletePrismaMigration` mutation."""
input DeletePrismaMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `_PrismaMigration` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `_PrismaMigration` mutation."""
type DeletePrismaMigrationPayload {
  """The `_PrismaMigration` that was deleted by this mutation."""
  _prismaMigration: _PrismaMigration

  """An edge for our `_PrismaMigration`. May be used by Relay 1."""
  _prismaMigrationEdge(
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPrismaMigrationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteStoreById` mutation."""
input DeleteStoreByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteStore` mutation."""
input DeleteStoreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Store` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Store` mutation."""
type DeleteStorePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedStoreId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Store` that was deleted by this mutation."""
  store: Store

  """An edge for our `Store`. May be used by Relay 1."""
  storeEdge(
    """The method to use when ordering `Store`."""
    orderBy: [StoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): StoresEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `_PrismaMigration`."""
  createPrismaMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePrismaMigrationInput!
  ): CreatePrismaMigrationPayload

  """Creates a single `Store`."""
  createStore(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStoreInput!
  ): CreateStorePayload

  """Deletes a single `_PrismaMigration` using its globally unique id."""
  deletePrismaMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePrismaMigrationInput!
  ): DeletePrismaMigrationPayload

  """Deletes a single `_PrismaMigration` using a unique key."""
  deletePrismaMigrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePrismaMigrationByIdInput!
  ): DeletePrismaMigrationPayload

  """Deletes a single `Store` using its globally unique id."""
  deleteStore(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStoreInput!
  ): DeleteStorePayload

  """Deletes a single `Store` using a unique key."""
  deleteStoreById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStoreByIdInput!
  ): DeleteStorePayload

  """
  Updates a single `_PrismaMigration` using its globally unique id and a patch.
  """
  updatePrismaMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePrismaMigrationInput!
  ): UpdatePrismaMigrationPayload

  """Updates a single `_PrismaMigration` using a unique key and a patch."""
  updatePrismaMigrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePrismaMigrationByIdInput!
  ): UpdatePrismaMigrationPayload

  """Updates a single `Store` using its globally unique id and a patch."""
  updateStore(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStoreInput!
  ): UpdateStorePayload

  """Updates a single `Store` using a unique key and a patch."""
  updateStoreById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStoreByIdInput!
  ): UpdateStorePayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads a single `_PrismaMigration` using its globally unique `ID`."""
  _prismaMigration(
    """
    The globally unique `ID` to be used in selecting a single `_PrismaMigration`.
    """
    nodeId: ID!
  ): _PrismaMigration
  _prismaMigrationById(id: String!): _PrismaMigration

  """Reads and enables pagination through a set of `_PrismaMigration`."""
  allPrismaMigrations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _PrismaMigrationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsConnection

  """Reads and enables pagination through a set of `Store`."""
  allStores(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StoreCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Store`."""
    orderBy: [StoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): StoresConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `Store` using its globally unique `ID`."""
  store(
    """The globally unique `ID` to be used in selecting a single `Store`."""
    nodeId: ID!
  ): Store
  storeById(id: Int!): Store
}

type Store implements Node {
  address: String!
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  owner: String!
  storeName: String!
}

"""
A condition to be used against `Store` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input StoreCondition {
  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `storeName` field."""
  storeName: String
}

"""An input for mutations affecting `Store`"""
input StoreInput {
  address: String!
  id: Int
  owner: String!
  storeName: String!
}

"""
Represents an update to a `Store`. Fields that are set will be updated.
"""
input StorePatch {
  address: String
  id: Int
  owner: String
  storeName: String
}

"""A connection to a list of `Store` values."""
type StoresConnection {
  """
  A list of edges which contains the `Store` and cursor to aid in pagination.
  """
  edges: [StoresEdge!]!

  """A list of `Store` objects."""
  nodes: [Store!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Store` you could get from the connection."""
  totalCount: Int!
}

"""A `Store` edge in the connection."""
type StoresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Store` at the end of the edge."""
  node: Store!
}

"""Methods to use when ordering `Store`."""
enum StoresOrderBy {
  ADDRESS_ASC
  ADDRESS_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OWNER_ASC
  OWNER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STORE_NAME_ASC
  STORE_NAME_DESC
}

"""All input for the `updatePrismaMigrationById` mutation."""
input UpdatePrismaMigrationByIdInput {
  """
  An object where the defined keys will be set on the `_PrismaMigration` being updated.
  """
  _prismaMigrationPatch: _PrismaMigrationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: String!
}

"""All input for the `updatePrismaMigration` mutation."""
input UpdatePrismaMigrationInput {
  """
  An object where the defined keys will be set on the `_PrismaMigration` being updated.
  """
  _prismaMigrationPatch: _PrismaMigrationPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `_PrismaMigration` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `_PrismaMigration` mutation."""
type UpdatePrismaMigrationPayload {
  """The `_PrismaMigration` that was updated by this mutation."""
  _prismaMigration: _PrismaMigration

  """An edge for our `_PrismaMigration`. May be used by Relay 1."""
  _prismaMigrationEdge(
    """The method to use when ordering `_PrismaMigration`."""
    orderBy: [_PrismaMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): _PrismaMigrationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateStoreById` mutation."""
input UpdateStoreByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Store` being updated.
  """
  storePatch: StorePatch!
}

"""All input for the `updateStore` mutation."""
input UpdateStoreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Store` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Store` being updated.
  """
  storePatch: StorePatch!
}

"""The output of our update `Store` mutation."""
type UpdateStorePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Store` that was updated by this mutation."""
  store: Store

  """An edge for our `Store`. May be used by Relay 1."""
  storeEdge(
    """The method to use when ordering `Store`."""
    orderBy: [StoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): StoresEdge
}

type _PrismaMigration implements Node {
  appliedStepsCount: Int!
  checksum: String!
  finishedAt: Datetime
  id: String!
  logs: String
  migrationName: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rolledBackAt: Datetime
  startedAt: Datetime!
}

"""
A condition to be used against `_PrismaMigration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _PrismaMigrationCondition {
  """Checks for equality with the object’s `appliedStepsCount` field."""
  appliedStepsCount: Int

  """Checks for equality with the object’s `checksum` field."""
  checksum: String

  """Checks for equality with the object’s `finishedAt` field."""
  finishedAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `logs` field."""
  logs: String

  """Checks for equality with the object’s `migrationName` field."""
  migrationName: String

  """Checks for equality with the object’s `rolledBackAt` field."""
  rolledBackAt: Datetime

  """Checks for equality with the object’s `startedAt` field."""
  startedAt: Datetime
}

"""An input for mutations affecting `_PrismaMigration`"""
input _PrismaMigrationInput {
  appliedStepsCount: Int
  checksum: String!
  finishedAt: Datetime
  id: String!
  logs: String
  migrationName: String!
  rolledBackAt: Datetime
  startedAt: Datetime
}

"""
Represents an update to a `_PrismaMigration`. Fields that are set will be updated.
"""
input _PrismaMigrationPatch {
  appliedStepsCount: Int
  checksum: String
  finishedAt: Datetime
  id: String
  logs: String
  migrationName: String
  rolledBackAt: Datetime
  startedAt: Datetime
}

"""A connection to a list of `_PrismaMigration` values."""
type _PrismaMigrationsConnection {
  """
  A list of edges which contains the `_PrismaMigration` and cursor to aid in pagination.
  """
  edges: [_PrismaMigrationsEdge!]!

  """A list of `_PrismaMigration` objects."""
  nodes: [_PrismaMigration!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_PrismaMigration` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_PrismaMigration` edge in the connection."""
type _PrismaMigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_PrismaMigration` at the end of the edge."""
  node: _PrismaMigration!
}

"""Methods to use when ordering `_PrismaMigration`."""
enum _PrismaMigrationsOrderBy {
  APPLIED_STEPS_COUNT_ASC
  APPLIED_STEPS_COUNT_DESC
  CHECKSUM_ASC
  CHECKSUM_DESC
  FINISHED_AT_ASC
  FINISHED_AT_DESC
  ID_ASC
  ID_DESC
  LOGS_ASC
  LOGS_DESC
  MIGRATION_NAME_ASC
  MIGRATION_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLLED_BACK_AT_ASC
  ROLLED_BACK_AT_DESC
  STARTED_AT_ASC
  STARTED_AT_DESC
}
